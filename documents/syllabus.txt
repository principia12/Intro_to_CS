데이터구조 스터디 

0. Universal rules

0.1 스터디 개요 

- 어느 정도 기본적인 지식이 있으신 분들을 대상으로 합니다. 하나 이상의 언어를 다룰 수 있다면 크게 상관없습니다. 다만 그 언어는 file io가 가능해야 하고, loop와 함수, 재귀문법, 그리고 반복문을 제공해야 합니다. 

- 실용적인 것과 거리가 멉니다. 단기적으로 아마 도움 안 될 겁니다. 장기적으로는 도움이 될 거라고 생각합니다.

- 교재는 따로 없습니다. 아래의 syllabus는 바뀔 수 있습니다. 물론 해당 부분 시작하기 1~2주 전에는 확정하도록 하겠습니다. 

- 만날까요, 만나지 말까요? 이건 하는 사람들끼리 정하는 걸로 합시다. 개인적으로는 1주일에 한번 정도는 만났으면 좋겠네요.

- 1주일에 데이터 구조 몇개씩 잡아서(이것도 하는 사람들끼리 난이도 봐서 정하는 걸로 하죠) 각자 개발해 오면 됩니다. 각자의 언어로 알아서 개발하고 github에 공유합니다. 

- 어떤 주제를 새로 시작하기 전에, 미리 예습할 사람 한명을 뽑아서 input/output 텍스트 파일로 만들어서 공유하는 걸로 합니다. 테스트를 위해서 모든 데이터구조/operation은 txt 파일로 변환가능해야 합니다. 이 변환 형식은 예습하는 사람이 만들어 오는 걸로 합니다. 다른 분들은 이 형식에 맞추어서, 테스트를 통과할 수 있도록 만들어야 됩니다. 

예) queue 의 경우 dequeue result 

test case 1
1
2
3
4
dequeue : 1 

test case 2

5 
20
1
5
dequeue : 5

이런 테스트 케이스를 만든 후, 나머지 분들은 그 테스트 케이스를 통과할 수 있도록 만들어야 합니다. 테스트를 하는 스크립트는 각자 os를 말씀해 주시면 만들어서 제공할 수 있도록 해보겠습니다. (리눅스랑 윈도우는 테스트가 가능한데, ios는 제가 맥이 없어서 좀 다른 방법을 써야 할지도 모르겠네요.)

- 예습하시는 분은 간단하게 psuedocode 짜오고, 각 데이터 구조에 대한 개략적인 내용을 txt나 워드, 한글 등 편한 포맷으로 정리해서 공유해 주세요. 가능하면 TeX 코드로 하면 좋긴 하겠는데 그러면 텍을 따로 또 배워야겠죠? 이것도 같이 하실 분들끼리 이야기해 봅시다. 

- 더 필요하다고 생각되는 사항이 있으시면 슬랙이나 페북으로 공유해 주세요. 

0.2 기초지식 
Complexity analysis
sorting
searching

0.3 알고리즘 전반 지식

Divide & Conquer
Dynamic programming 
Greedy algorithms

1. 리스트 
1.1 structures to implement
- singly linked list
- doubly linked list
- circular linked list
1.2 operations 
- sorting 
- searching 
- insert element
- delete element 


2. 스택 
2.1  structures to implement
-  simple stack
2.2 operations
- sorting 
- searching 
- insert element
- delete element 


3. 큐
3.1 structures to implement
- simple queue 
- priority queue 
- deque(double ended queue)
3.2 operations 
- sorting 
- searching 
- insert element
- delete element 

	

4. advanced structure
4.1 structures to implement

4.1.1 tree
	

4.1.2 graph 
- simple graph
- directed graph
- directed weighted graph 

4.2 operations on graph

4.2.1 Elementary algorithms 
- Breadth-first search
- Depth-first search
- Topological sort

4.2.2 Minimum spanning tree
- Kruskal 
- Prim 

4.2.3 Shortest paht algorithms
- Bellman-Ford algorithm 
- Dijkstra's algorithms
- Floyd-Warshall algorithms
- Johnson's algorithm


5. Automata theory 

솔직히 4까지라도 진행되면 다행이라고 생각하기 때문에, 여기는 그 후에 논의해 보도록 하겠습니다. 